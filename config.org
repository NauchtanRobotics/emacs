#+TITLE: Ben Davies Emacs Configuration
#+STARTUP: overview
#+OPTIONS: toc:4 h:4

* Configuration
** About this file

This file configures emacs using [[http://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][org-babel]]. An example of "literate programming", elisp configuration is read from the org file. I relied heavily on [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]] to build this file.

The =~/.emacs.d/init.el= file contains only the following to bootstrap org-babel mode:

#+BEGIN_SRC emacs-lisp :tangle no
  ;;; init.el --- Where all the magic begins
  ;;
  ;; This file loads Org-mode and then loads the rest of our Emacs
  ;; initialization from Emacs lisp embedded in literate Org-mode files.

  ;; Load up Org Mode and (now included) Org Babel for elisp embedded in
  ;; Org Mode files
  (setq dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name)))

  (let* ((org-dir (expand-file-name
                   "lisp" (expand-file-name
                           "org" (expand-file-name
                                  "src" dotfiles-dir))))
         (org-contrib-dir (expand-file-name
                           "lisp" (expand-file-name
                                   "contrib" (expand-file-name
                                              ".." org-dir))))
         (load-path (append (list org-dir org-contrib-dir)
                            (or load-path nil))))
    ;; load up Org-mode and Org-babel
    (require 'org-install)
    (require 'ob-tangle))

  ;; load up all literate org-mode files in this directory
  (mapc #'org-babel-load-file (directory-files dotfiles-dir t "\\.org$"))
#+END_SRC 
** Personal Information

#+BEGIN_SRC emacs-lisp 
  (setq user-full-name "Ben Davies"
        user-mail-address "brdavies@gmail.com")
#+END_SRC 
   
** Emacs Initialisation

*** Site-specific variables

Store site-specific stuff in a file outside of source control (dropbox location, etc).

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.site" 'noerror)
#+END_SRC

*** Load secrets

Store secrets in a file outside of source control.

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.secrets" 'noerror)
#+END_SRC

*** Initialise package

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
  (package-initialize)
#+END_SRC
    
*** Add package sources

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
#+END_SRC

Use =M-x package-refresh-contents= to reload the list of packages after adding these for the first time.

*** Add package directories

Save to =my-init-file= and =my-dotfiles-directory= absolute path to the emacs configuration directory.

#+BEGIN_SRC emacs-lisp
  (setq my-init-file (or load-file-name (buffer-file-name)))
  (setq my-dotfiles-directory (file-name-directory my-init-file))
#+END_SRC

I manually install packages, add those directories to the =load-path= so emacs can find them.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat my-dotfiles-directory "packages"))
#+END_SRC

*** Initialise use-package

The [[https://github.com/jwiegley/use-package][use-package]] declaration macro allows a different way of installing and initialising packages. I'm testing it out to see if it's better than just using =(require 'x)=.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (require 'use-package)
#+END_SRC
** General Configuration
*** Backups

By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
  ;; Delete excess backup versions silently.
  (setq delete-old-versions -1)

  ;; Make numeric backup versions unconditionally.
  (setq version-control t)

  ;; Backups of registered files are made as with other files.
  (setq vc-make-backup-files t)

  ;; Transforms to apply to buffer file name before making auto-save
  ;; file name.
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** Text mode

Visual line mode is used to wrap long lines. It rebinds =C-a=, =C-e=, and =C-k= to commands that operate by visual lines instead of logical lines.

#+BEGIN_SRC emacs-lisp
  (remove-hook 'text-mode-hook #'turn-on-auto-fill)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

*** Deleting text

When Delete Selection mode is enabled, typed text replaces the selection if the selection is active. Otherwise, typed text is just inserted at point regardless of any selection. This means that =C-d= will actually replace delete the current selection.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

*** Clean up user interface

#+BEGIN_SRC emacs-lisp
  (when window-system
    (tooltip-mode -1)
    (tool-bar-mode -1)
    (menu-bar-mode 1)
    (scroll-bar-mode -1))

  ;; Make sure the scratch buffer is empty.
  (setq initial-scratch-message nil)
#+END_SRC

*** Helm - interactive completion

Helm makes it easy to complete various things. I find it to be easier to configure than ido in order to get completion in as many places as possible, although I prefer ido's way of switching buffers.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure helm
    :diminish helm-mode
    :init
    (progn
      (require 'helm-config)
      (setq helm-candidate-number-limit 100)
      ;; From https://gist.github.com/antifuchs/9238468
      (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
            helm-input-idle-delay 0.01    ; this actually updates things
                                          ; reeeelatively quickly.
            helm-quick-update t
            helm-M-x-requires-pattern nil
            helm-ff-skip-boring-files t
            helm-split-window-in-side-p t)
      (helm-mode))
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c SPC" . helm-all-mark-rings)))
  (ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+END_SRC

** Navigation and windows
*** Split windows

For some reason I find it easier to visualise splitting windows with pipe and underscore than with =C-2= and =C-3=.
    
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x |") 'split-window-right)
  (global-set-key (kbd "C-x _") 'split-window-below)
#+END_SRC

*** Jumping between windows
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x p")
                  (lambda ()
                    (interactive)
                    (other-window -1)))
#+END_SRC    

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press =C-c <left>=.

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

*** Silver search

The silver searcher is a code searching tool with a focus on speed.

#+BEGIN_SRC emacs-lisp
  (use-package helm-ag
    :bind (("C-c s d" . helm-ag)
           ("C-c s f" . helm-ag-this-file)
           ("C-c s p" . helm-ag-project-root)))
#+END_SRC

** Coding
*** C
*** Go
*** Javascript   
** Org
*** Keyboard shortcuts

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c i")
                  (lambda()
                    (interactive)
                    (org-babel-load-file "~/.emacs.d/config.org")))
#+END_SRC

** Emacs server

#+BEGIN_SRC emacs-lisp
  (when window-system
    (require 'server)
    (or (server-running-p)
        (server-start)))
  ;; (use-package edit-server
  ;;   :init
  ;;   (add-hook 'after-init-hook 'server-start t)
  ;;   (add-hook 'after-init-hook 'edit-server-start t))
#+END_SRC
