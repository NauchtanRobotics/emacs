# -*- mode: snippet -*-
# name: C module
# key: c-file-module
# --
/**
 * @file ${1:`(file-name-nondirectory buffer-file-name)`}
 *
 * @brief
 *
 */

/* INCLUDES ----------------------------------------------------------------- */

#include "${2:`(file-name-sans-extension (file-name-nondirectory buffer-file-name))`}.h"
#include "module-data.h"

/* PRIVATE DEFINES ---------------------------------------------------------- */
/* PRIVATE TYPEDEFS / STRUCTURES -------------------------------------------- */

/**
 * Object containing state for the ${3:`(replace-regexp-in-string "-" " " (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))`} module. */
struct ${4:`(replace-regexp-in-string "-" "_" (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))`}_ctx_s
{
    int temp;
};

/* PRIVATE FUNCTION DECLARATIONS -------------------------------------------- */

/**
 * This function implements @ref module_init_t, it initialises...
 *
 * @retval >0
 *     Initialisation is pending, this function must be called again.
 * @retval =0
 *     Initialisation complete, @p ctx is modified to point at the context
 *     object for this module.
 * @retval <0
 *     An error occurred.
 * @param[out] ctx ($4_ctx_t *)
 *     If this function is successful @p ctx is modified to point at a context
 *     object for this module. This pointer must be passed to all other
 *     functions in this module. This parameter can be NULL.
 * @param[in] md
 *     Pointer to an object containing application-wide data. Can be NULL.
 */
static int $4_init(void **ctx, module_data_t md);

/* -------------------------------------------------------------------------- */

/**
 * This function implements @ref module_deinit_t, it frees all resources
 * allocated by this module.
 *
 * @retval =0
 *     Success.
 * @retval <0
 *     An error occurred.
 * @param[out] ctx (@ref $4_ctx_t)
 *   Free all resources allocated to this context.
 * @param[in] md
 *     Pointer to an object containing application-wide data.
 */
static int $4_deinit(void *ctx, module_data_t md);

/* -------------------------------------------------------------------------- */

/**
 * This function implements @ref module_poll_t, it...
 *
 * @retval =0
 *   All resources freed.
 * @retval <0
 *   An error occured.
 * @param[out] ctx (@ref $4_ctx_t)
 *   Pointer to this module's context.
 * @param[in] md
 *   Pointer to an object containing application-wide data.
 */
static int $4_poll(void *ctx, module_data_t md);

/* EXTERN FUNCTION DECLARATIONS --------------------------------------------- */
/* PRIVATE DATA ------------------------------------------------------------- */
/* PUBLIC DATA -------------------------------------------------------------- */

const struct module_api_s mod_$4 =
{
    .name = "$2",
    .f_init = $4_init,
    .f_deinit = $4_deinit,
    .f_poll = $4_poll,
    .f_tick = NULL,
    .f_wake = NULL,
    .f_sleep = NULL,
};

/* FUNCTION DEFINITIONS ----------------------------------------------------- */

static int $4_init(void **mod_ctx, module_data_t md)
{
    static struct $4_ctx_s ctx;

    int ret = RET(CU_MODULE_DEPENDENCY);

    do
    {
        /* Module successfully initialised. */
        *mod_ctx = &ctx;
        ret = 0;
    }
    while (0);

    return ret;
}

/* -------------------------------------------------------------------------- */

static int $4_deinit(void *mod_ctx, module_data_t md)
{
    $4_ctx_t ctx = ($4_ctx_t)mod_ctx;
    (void)ctx;

    return 0;
}

/* -------------------------------------------------------------------------- */

static int $4_poll(void *mod_ctx, module_data_t md) {

    int ret = 0;
    $4_ctx_t ctx = ($4_ctx_t)mod_ctx;
    (void)ctx;

    return ret;
}

/* -------------------------------------------------------------------------- */
